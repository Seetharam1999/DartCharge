{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nvar razorpayEvents = new NativeEventEmitter(NativeModules.RazorpayEventEmitter);\n\nvar removeSubscriptions = function removeSubscriptions() {\n  razorpayEvents.removeAllListeners('Razorpay::PAYMENT_SUCCESS');\n  razorpayEvents.removeAllListeners('Razorpay::PAYMENT_ERROR');\n  razorpayEvents.removeAllListeners('Razorpay::EXTERNAL_WALLET_SELECTED');\n};\n\nvar RazorpayCheckout = function () {\n  function RazorpayCheckout() {\n    _classCallCheck(this, RazorpayCheckout);\n  }\n\n  _createClass(RazorpayCheckout, null, [{\n    key: \"open\",\n    value: function open(options, successCallback, errorCallback) {\n      return new Promise(function (resolve, reject) {\n        razorpayEvents.addListener('Razorpay::PAYMENT_SUCCESS', function (data) {\n          var resolveFn = successCallback || resolve;\n          resolveFn(data);\n          removeSubscriptions();\n        });\n        razorpayEvents.addListener('Razorpay::PAYMENT_ERROR', function (data) {\n          var rejectFn = errorCallback || reject;\n          rejectFn(data);\n          removeSubscriptions();\n        });\n        NativeModules.RazorpayCheckout.open(options);\n      });\n    }\n  }, {\n    key: \"onExternalWalletSelection\",\n    value: function onExternalWalletSelection(externalWalletCallback) {\n      razorpayEvents.addListener('Razorpay::EXTERNAL_WALLET_SELECTED', function (data) {\n        externalWalletCallback(data);\n        removeSubscriptions();\n      });\n    }\n  }]);\n\n  return RazorpayCheckout;\n}();\n\nexport default RazorpayCheckout;","map":{"version":3,"sources":["/media/srs/cc0e7f07-99b7-4dba-942d-231b731af3c6/Project/react/DartCharge/node_modules/react-native-razorpay/RazorpayCheckout.js"],"names":["razorpayEvents","NativeEventEmitter","NativeModules","RazorpayEventEmitter","removeSubscriptions","removeAllListeners","RazorpayCheckout","options","successCallback","errorCallback","Promise","resolve","reject","addListener","data","resolveFn","rejectFn","open","externalWalletCallback"],"mappings":"AAAA;;;;;;AAIA,IAAMA,cAAc,GAAG,IAAIC,kBAAJ,CAAuBC,aAAa,CAACC,oBAArC,CAAvB;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCJ,EAAAA,cAAc,CAACK,kBAAf,CAAkC,2BAAlC;AACAL,EAAAA,cAAc,CAACK,kBAAf,CAAkC,yBAAlC;AACAL,EAAAA,cAAc,CAACK,kBAAf,CAAkC,oCAAlC;AACD,CAJD;;IAMMC,gB;;;;;;;yBACQC,O,EAASC,e,EAAiBC,a,EAAe;AACnD,aAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CZ,QAAAA,cAAc,CAACa,WAAf,CAA2B,2BAA3B,EAAwD,UAACC,IAAD,EAAU;AAChE,cAAIC,SAAS,GAAGP,eAAe,IAAIG,OAAnC;AACAI,UAAAA,SAAS,CAACD,IAAD,CAAT;AACAV,UAAAA,mBAAmB;AACpB,SAJD;AAKAJ,QAAAA,cAAc,CAACa,WAAf,CAA2B,yBAA3B,EAAsD,UAACC,IAAD,EAAU;AAC9D,cAAIE,QAAQ,GAAGP,aAAa,IAAIG,MAAhC;AACAI,UAAAA,QAAQ,CAACF,IAAD,CAAR;AACAV,UAAAA,mBAAmB;AACpB,SAJD;AAKAF,QAAAA,aAAa,CAACI,gBAAd,CAA+BW,IAA/B,CAAoCV,OAApC;AACD,OAZM,CAAP;AAaD;;;8CACgCW,sB,EAAwB;AACvDlB,MAAAA,cAAc,CAACa,WAAf,CAA2B,oCAA3B,EAAiE,UAACC,IAAD,EAAU;AACzEI,QAAAA,sBAAsB,CAACJ,IAAD,CAAtB;AACAV,QAAAA,mBAAmB;AACpB,OAHD;AAID;;;;;;AAGH,eAAeE,gBAAf","sourcesContent":["'use strict';\n\nimport { NativeModules, NativeEventEmitter } from 'react-native';\n\nconst razorpayEvents = new NativeEventEmitter(NativeModules.RazorpayEventEmitter);\n\nconst removeSubscriptions = () => {\n  razorpayEvents.removeAllListeners('Razorpay::PAYMENT_SUCCESS');\n  razorpayEvents.removeAllListeners('Razorpay::PAYMENT_ERROR');\n  razorpayEvents.removeAllListeners('Razorpay::EXTERNAL_WALLET_SELECTED');\n};\n\nclass RazorpayCheckout {\n  static open(options, successCallback, errorCallback) {\n    return new Promise(function(resolve, reject) {\n      razorpayEvents.addListener('Razorpay::PAYMENT_SUCCESS', (data) => {\n        let resolveFn = successCallback || resolve;\n        resolveFn(data);\n        removeSubscriptions();\n      });\n      razorpayEvents.addListener('Razorpay::PAYMENT_ERROR', (data) => {\n        let rejectFn = errorCallback || reject;\n        rejectFn(data);\n        removeSubscriptions();\n      });\n      NativeModules.RazorpayCheckout.open(options);\n    });\n  }\n  static onExternalWalletSelection(externalWalletCallback) {\n    razorpayEvents.addListener('Razorpay::EXTERNAL_WALLET_SELECTED', (data) => {\n      externalWalletCallback(data);\n      removeSubscriptions();\n    });\n  }\n}\n\nexport default RazorpayCheckout;\n"]},"metadata":{},"sourceType":"module"}